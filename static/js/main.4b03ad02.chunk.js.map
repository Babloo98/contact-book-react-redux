{"version":3,"sources":["actions/contactAction.js","actions/actionType.js","pagination/index.js","detail/index.js","Header/index.js","App.js","serviceWorker.js","reducers/index.js","reducers/contactReducer.js","index.js","store/configureStore.js"],"names":["createContact","contact","type","Pagination","props","handleClick","event","console","log","target","id","setState","currentPage","Number","handleDelete","e","index","notify","deleteContact","toast","error","position","POSITION","TOP_RIGHT","autoClose","state","dataPerPage","this","data","indexOfLastTodo","indexOfFirstTodo","renderContact","slice","map","className","src","onClick","pageNumbers","i","Math","ceil","length","push","renderPageNumbers","number","key","React","Component","connect","dispatch","contactAction","Detail","componentDidMount","contacts","ownProps","Header","App","handleChange","name","value","handleSubmit","email","preventDefault","success","showDetail","seeDetail","onChange","Boolean","window","location","hostname","match","combineReducers","action","Object","assign","splice","initialState","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b03ad02.chunk.js","sourcesContent":["import * as actionType from './actionType';\n\nexport const createContact = (contact) =>{\n    return{\n        type: actionType.CREATE_NEW_CONTACT,\n        contact: contact\n    }\n}\n\nexport const deleteContact = (index) =>{\n    return{\n        type: actionType.DELETE_CONTACT,\n        index: index\n    }\n}\n\n","export const GET_ALL_CONTACTS = 'GET_ALL_CONTACTS';\nexport const CREATE_NEW_CONTACT = 'CREATE_NEW_CONTACT';\nexport const DELETE_CONTACT = 'DELETE_CONTACT';","import React from 'react';\nimport * as contactAction from '../actions/contactAction';\nimport { connect } from 'react-redux' ;\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPage: 1,\n      dataPerPage: 5,\n      index: ''\n    };\n  }\n\n      handleClick = (event) => {\n          console.log(event.target.id)\n        this.setState({\n          currentPage: Number(event.target.id)\n        });\n      };\n\n      handleDelete = (e,index) =>{\n        this.notify();\n          this.setState({\n            index: +(index)\n          });\n          this.props.deleteContact(index);\n      }\n\n      notify = () => toast.error(\"Contact deleted Successfully!!\", {\n        position: toast.POSITION.TOP_RIGHT, autoClose: 1500\n      });\n\n      render() {\n        const { currentPage, dataPerPage } = this.state;\n        const { data } = this.props;\n\n        const indexOfLastTodo = currentPage * dataPerPage;\n        const indexOfFirstTodo = indexOfLastTodo - dataPerPage;\n        \n        const currentData = data.slice(indexOfFirstTodo, indexOfLastTodo);\n\n        const renderContact = currentData.map((data, index) => {\n            return(\n                <div className=\"media single-detail\">\n                  <div>\n                   <img src= \"https://www.w3schools.com/howto/img_avatar.png\" className=\"mr-3 mt-3 rounded-circle\"></img>\n                  </div>\n                  <div className=\"media-body\">  \n                    <h4>{data['name']}</h4> \n                    <p>{data['email']}</p>\n                    <h4>{data['number']}</h4>\n                  </div>\n                  <div className=\"actions\">\n                    <span onClick={e=>this.handleDelete(e,index)} className=\"close\">\n                      &times;\n                    </span>\n                  </div>  \n                  <ToastContainer />\n                </div>\n            )\n        });\n\n        const pageNumbers = [];\n        for (let i = 1; i <= Math.ceil(data.length / dataPerPage); i++) {\n          pageNumbers.push(i);\n        }\n\n        const renderPageNumbers = pageNumbers.map(number => {\n          return (\n            <li\n              key={number}\n              id={number}\n              onClick={this.handleClick}\n              className=\"pages\"\n            >\n              {number}\n            </li>\n          );\n        });\n\n        return (\n          <div>\n            <ul>\n              {renderContact}\n            </ul>\n            <ul id=\"page-numbers\">\n              {renderPageNumbers}\n            </ul>\n          </div>\n        );\n      }\n    }\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deleteContact: index => dispatch(contactAction.deleteContact(index))\n  }\n};\n\nexport default connect(null,mapDispatchToProps)(Pagination);\n","import React from 'react';\nimport { connect } from 'react-redux' ;\nimport * as contactAction from '../actions/contactAction';\nimport Pagination from '../pagination';\n\nclass Detail extends React.Component{\n        constructor(props){\n        super(props);\n        this.state ={\n            contact: []\n        }\n    }\n\n    componentDidMount = () =>{\n        const { contacts } = this.props;\n        console.log('props',this.props.contacts);\n        this.setState({\n            contact: contacts\n        });\n    }\n\n    render(){\n        return(\n            <div className=\"detail\">\n                <Pagination\n                    data = {this.props.contacts}\n                />\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n      contacts: state.contacts\n    }\n  };\n\nconst mapDispatchToProps = (dispatch) => {\nreturn {\n    createContact: contact => dispatch(contactAction.createContact(contact))\n}\n};\n  \n\nexport default connect(mapStateToProps, mapDispatchToProps)(Detail);","import React from 'react';\n\nclass Header extends React.Component{\n    render(){\n        return(\n            <div className='navbar'>\n                <h3>Contact Application</h3>\n            </div>\n        )\n    }    \n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './main.css'\nimport * as contactAction from './actions/contactAction';\nimport { connect } from 'react-redux' ;\nimport Detail from './detail';\nimport Header from './Header';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      name: '',\n      number: '',\n      email: '',\n      seeDetail: true,\n    }\n  }\n\n  handleChange = (e) =>{\n    this.setState({\n      [e.target.name]:e.target.value \n    })\n  };\n\n  handleSubmit = (e) =>{\n    const { name, number, email} = this.state; \n    e.preventDefault();\n    this.notify();\n    let contact = {\n      name: name,\n      number: number,\n      email: email\n    }\n    this.props.createContact(contact);\n  };\n\n  notify = () => toast.success(\"Contact created Successfully!!\", {\n    position: toast.POSITION.TOP_RIGHT, autoClose: 2000\n  });\n\n  showDetail = (e) =>{\n    e.preventDefault();\n    const { seeDetail } = this.state;\n    this.setState({\n      seeDetail: !seeDetail\n    },()=>console.log('hey===>',seeDetail))\n  }\n\n  render(){\n    const { seeDetail } = this.state;\n    console.log(this.props)\n    return (\n      <div className=\"Appwrapper\">\n        <div className='App'>\n          <Header/>\n          <div className='form'>    \n            <h3 className=' app-heading'>Add to contact</h3>\n            <p>#Add your contact here and see the saved contacts within the application</p>\n            {seeDetail ?\n            (<form className=\"\">\n              <div className = 'form-group'>\n                <label className=''>Enter Name:</label>\n                <input className='form-control' name = 'name' type=\"text\" onChange={e => this.handleChange(e)} />\n              </div>\n              <div className = 'form-group'>\n                <label className=''>Enter Contact:</label>\n                <input className='form-control' name = 'number' type=\"text\" onChange={e => this.handleChange(e)} />\n              </div>\n              <div className = 'form-group'>\n                <label className=''>Enter Email:</label>\n                <input className='form-control' name = 'email' type=\"text\" onChange={e => this.handleChange(e)} />\n              </div>\n              <button className= 'button'  onClick={e =>this.handleSubmit(e)}>Create Contact</button>\n              <button className= 'button'  onClick={e =>this.showDetail(e)}>See Contacts</button>\n            </form>):\n            <Detail/>}\n          </div>      \n        </div>\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    contacts: state.contacts\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    createContact: contact => dispatch(contactAction.createContact(contact))\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport contacts from './contactReducer';\n\nexport default combineReducers({\n    contacts: contacts\n});","import * as actionTypes from '../actions/actionType';\n\nexport default (state = [], action) => {\n    switch (action.type){\n      case actionTypes.CREATE_NEW_CONTACT:\n      return [\n        ...state,\n        Object.assign({}, action.contact)\n      ];\n      case actionTypes.DELETE_CONTACT:\n        state.splice(action.index,1);\n        console.log('state=====>',state,action.index)\n        return[\n          ...state\n      ];\n      default:\n        return state;\n    }\n  };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport configureStore  from './store/configureStore'\n\nconst store = configureStore();\n\nReactDOM.render(\n<Provider store = { store }>\n    <App />\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {createStore} from 'redux';\nimport rootReducer from '../reducers';\n\nexport default function configureStore(initialState) {\n  return createStore(rootReducer, initialState);\n}"],"sourceRoot":""}